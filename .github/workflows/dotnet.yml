name: .NET

permissions:
  pull-requests: write
  contents: read

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    # Setup .NET SDK
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore ./Tests/Tests.csproj

    # Build the Tests project
    - name: Build Tests project
      run: dotnet build ./Tests/Tests.csproj --no-restore

    # Run Tests
    - name: Run Tests
      run: dotnet test ./Tests/Tests.csproj --no-build --verbosity normal

  update-version:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.set-version.outputs.VERSION }}
      RELEASE_BRANCH: ${{ steps.set-version.outputs.RELEASE_BRANCH }}
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4

      - name: Setup Versions
        id: set-version
        run: |
          VERSION="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
          RELEASE_BRANCH="release/$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
          
      - name: Clone repository using PAT
        run: |
          echo "Cloning repo and checking out release branch: ${{ env.RELEASE_BRANCH }}"
          git clone https://x-access-token:${{ secrets.ACTION_PAT }}@github.com/Vulcaine/Altruist.git repo
          cd repo
          git config user.name "Vulcaine"
          git config user.email "Vulcaine@users.noreply.github.com"
          git checkout -b "${{ env.RELEASE_BRANCH }}"
          
      - name: Install dos2unix
        run: sudo apt-get install dos2unix

      - name: Validate Project Versions
        run: |
          echo "ðŸ“¦ Checking versions..."
          dos2unix ./Altruist/validate_versions.sh
          chmod +x ./Altruist/validate_versions.sh
          ./Altruist/validate_versions.sh
      
      - name: Update Project Versions
        run: |
          echo "ðŸ“¦ Updating project versions to match version.txt..."
          dos2unix ./Altruist/update_versions.sh
          chmod +x ./Altruist/update_versions.sh
          ./Altruist/update_versions.sh

      - name: Commit and Push Changes
        run: |
          cd repo
          git add .
          git commit -m "chore: update package versions to match version.txt" || echo "No changes to commit"
          git push --set-upstream origin "${{ env.RELEASE_BRANCH }}" || echo "Branch is up to date"

  release:
    runs-on: ubuntu-latest
    needs: update-version
    steps:
    # Checkout main
    - name: Checkout repository
      uses: actions/checkout@v4

    # Setup .NET SDK
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Clone repository using PAT
      run: |
        git clone https://x-access-token:${{ secrets.ACTION_PAT }}@github.com/Vulcaine/Altruist.git repo
        cd repo
        git config user.name "Vulcaine"
        git config user.email "Vulcaine@users.noreply.github.com"
        git fetch
        git checkout "${{ needs.update-version.outputs.RELEASE_BRANCH }}"

    # Create a new version tag based on the release branch
    - name: Create Tag on Release Branch
      working-directory: ./repo
      run: |
        git tag "${{ needs.update-version.outputs.VERSION }}"
        git push origin "${{ needs.update-version.outputs.VERSION }}"

    # Build the package using dotnet pack
    - name: Build Package
      run: dotnet pack ./Altruist --configuration Release --output ./Altruist/nupkgs

    - name: Create GitHub Release manually and upload artifacts
      working-directory: ./repo
      env:
        VERSION: ${{ needs.update-version.outputs.VERSION }}
        GH_PAT: ${{ secrets.ACTION_PAT }}
      run: |
        echo "ðŸ“¦ Creating GitHub release for tag $VERSION"
    
        # Create the release and capture upload_url
        RESPONSE=$(curl -s -X POST https://api.github.com/repos/Vulcaine/Altruist/releases \
          -H "Authorization: token $GH_PAT" \
          -H "Accept: application/vnd.github+json" \
          -d @- <<EOF
          {
            "tag_name": "$VERSION",
            "name": "$VERSION",
            "body": "Automated release for $VERSION",
            "draft": false,
            "prerelease": false
          }
          EOF)
    
        echo "$RESPONSE"
    
        UPLOAD_URL=$(echo "$RESPONSE" | jq -r .upload_url | sed -e "s/{?name,label}//")
    
        echo "ðŸ“¤ Uploading .nupkg files to: $UPLOAD_URL"
    
        for file in ./Altruist/nupkgs/*.nupkg; do
          [ -e "$file" ] || continue  # Skip if no files matched
          FILENAME=$(basename "$file")
          echo "Uploading $FILENAME"
          curl --fail -s \
            -X POST "$UPLOAD_URL?name=$FILENAME" \
            -H "Authorization: token $GH_PAT" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$file"
        done
    
        echo "âœ… Done uploading release artifacts."

    # Publish the package to NuGet
    - name: Publish to NuGet
      env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        dotnet nuget push ./Altruist/nupkgs/*.nupkg -k "$NUGET_API_KEY" -s https://api.nuget.org/v3/index.json --skip-duplicate

    - name: Create Release Pull Request Via GitHub API
      run: |
        echo "ðŸ“¬ Creating pull request via GitHub API..."
        curl -s -X POST https://api.github.com/repos/Vulcaine/Altruist/pulls \
          -H "Authorization: token ${{ secrets.ACTION_PAT }}" \
          -H "Accept: application/vnd.github+json" \
          -d '{
            "title": "${{ needs.update-version.outputs.RELEASE_BRANCH }}: Merge Release into Main",
            "body": "This PR merges the new release version back to main",
            "head": "${{ needs.update-version.outputs.RELEASE_BRANCH }}",
            "base": "main"
          }'
