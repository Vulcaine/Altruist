name: .NET

permissions:
  pull-requests: write
  contents: read

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    # Setup .NET SDK
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore ./Tests/Tests.csproj

    # Build the Tests project
    - name: Build Tests project
      run: dotnet build ./Tests/Tests.csproj --no-restore

    # Run Tests
    - name: Run Tests
      run: dotnet test ./Tests/Tests.csproj --no-build --verbosity normal

  update-version:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
    
      - name: Clone repository using PAT
        run: |
          VERSION="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
          RELEASE_BRANCH="release/$VERSION"
          echo "Cloning repo and checking out release branch: $RELEASE_BRANCH"
          git clone https://x-access-token:${{ secrets.ACTION_PAT }}@github.com/Vulcaine/Altruist.git repo
          cd repo
          git config user.name "Vulcaine"
          git config user.email "Vulcaine@users.noreply.github.com"
          git checkout -b "$RELEASE_BRANCH"
          
      - name: Install dos2unix
        run: sudo apt-get install dos2unix

      - name: Validate Project Versions
        run: |
          echo "ðŸ“¦ Checking versions..."
          dos2unix ./Altruist/validate_versions.sh
          chmod +x ./Altruist/validate_versions.sh
          ./Altruist/validate_versions.sh
      
      - name: Update Project Versions
        run: |
          echo "ðŸ“¦ Updating project versions to match version.txt..."
          dos2unix ./Altruist/update_versions.sh
          chmod +x ./Altruist/update_versions.sh
          ./Altruist/update_versions.sh

      - name: Commit and Push Changes
        run: |
          VERSION="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
          RELEASE_BRANCH="release/$VERSION"
          cd repo
          git add .
          git commit -m "chore: update package versions to match version.txt" || echo "No changes to commit"
          git push --set-upstream origin "$RELEASE_BRANCH"

  release:
    runs-on: ubuntu-latest
    needs: update-version
    steps:
    # Checkout main
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # Setup .NET SDK
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    # Checkout the Release Branch
    - name: Checkout Release Branch
      run: |
        VERSION="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
        RELEASE_BRANCH="release/$VERSION"
        echo "Checking out release branch: $RELEASE_BRANCH"
        git checkout "$RELEASE_BRANCH"

    # Configure Git with bot credentials
    - name: Configure Git for Commits
      run: |
        git config user.name "Vulcaine"
        git config user.email "Vulcaine@users.noreply.github.com"

    # Create a new version tag based on the release branch
    - name: Create Tag on Release Branch
      run: |
        VERSION="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        git tag "$VERSION"
        git push origin "$VERSION"

    # Build the package using dotnet pack
    - name: Build Package
      run: dotnet pack ./Altruist --configuration Release --output ./Altruist/nupkgs

    # Publish the package to NuGet
    - name: Publish to NuGet
      env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        dotnet nuget push ./Altruist/nupkgs/*.nupkg -k "$NUGET_API_KEY" -s https://api.nuget.org/v3/index.json --skip-duplicate

    # Create a new GitHub release using the tag created
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        files: ./Altruist/nupkgs/*.nupkg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release Pull Request Via GitHub API
      run: |
        echo "ðŸ“¬ Creating pull request via GitHub API..."
        VERSION="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
        RELEASE_BRANCH="release/$VERSION"
        curl -s -X POST https://api.github.com/repos/Vulcaine/Altruist/pulls \
          -H "Authorization: token ${{ secrets.ACTION_PAT }}" \
          -H "Accept: application/vnd.github+json" \
          -d '{
            "title": "$RELEASE_BRANCH: Merge Release into Main",
            "body": "This PR merges the new release version back to main",
            "head": "$RELEASE_BRANCH",
            "base": "main"
          }'
